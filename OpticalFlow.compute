#pragma kernel CSMain

RWTexture2D<float4> Result;

Texture2DArray<float4> _FlowF2darray;
Texture2DArray<float4> _Views2darray;
Texture2DArray<float4> _FlowR2darray;

float _view = 0;

// Once format is stable, can use bye shifting to get data, like uint l = ui & 0xff; h = ur >> 8
// excerpt from the jupyter notebook, packaging a[2] into a png files rgba:
//    "def modulos(a):\n",
//    "    xf = a[0]*32;\n",
//    "    xmsb = math.floor(xf / 256);\n",
//    "    xlsb = xf - xmsb * 256;\n",
//    "    yf = a[1]*32;\n",
//    "    ymsb = math.floor(yf / 256);\n",
//    "    ylsb = yf - ymsb * 256;\n",
//    "    return [xlsb,128+xmsb,ylsb,128+ymsb]"
// but note somewhere along the line, image went from [0,256] to [0,1.0]

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int sln = (int)floor(_view);
    float del = _view - sln;
    int ix = id.x;
    int iy = id.y;
    int ixr = id.x;
    int iyr = id.y;
	
    float4 flowF = _FlowF2darray.Load(int4(id.x,id.y,sln,0));
    float4 flowR = _FlowR2darray.Load(int4(id.x,id.y,sln,0));
    float2 fF = float2((flowF.x * 8.0 + (flowF.y-0.5) * 2048.0),(flowF.z *8.0 + (flowF.w -0.5) * 2048.0));
    float2 fR = float2((flowR.x * 8.0 + (flowR.y-0.5) * 2048.0),(flowR.z * 8.0 + (flowR.w -0.5) * 2048.0));

    ix -= del * fF.x;
    ixr -= (1.0-del) * fR.x; 
    iy -= del * fF.y;
    iyr -= (1.0-del) * fR.y;

    float4 fc = _Views2darray.Load(int4(ix,iy,sln,0));
    float4 rc = _Views2darray.Load(int4(ixr,iyr,sln+1,0));

    Result[id.xy] = (1.0-del) * fc + del * rc;
}
